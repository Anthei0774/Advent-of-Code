puzzle = """029A
980A
179A
456A
379A"""

with open("2024/inputs/21.txt") as f:
    puzzle = f.read()

puzzle = puzzle.split("\n")

################################################################################
# PART 1

# +---+---+---+
# | 7 | 8 | 9 |
# +---+---+---+
# | 4 | 5 | 6 |
# +---+---+---+
# | 1 | 2 | 3 |
# +---+---+---+
#     | 0 | A |
#     +---+---+

numeric_keypad = {
    "0": {
        "0": [""],
        "A": [">"],
        "1": ["^<"],
        "2": ["^"],
        "3": ["^>", ">^"],
        "4": ["^^<", "^<^"],
        "5": ["^^"],
        "6": ["^^>", "^>^", ">^^"],
        "7": ["^^^<", "^^<^", "^<^^"],
        "8": ["^^^"],
        "9": ["^^^>", "^^>^", "^>^^", ">^^^"],
    },
    "A": {
        "0": ["<"],
        "A": [""],
        "1": ["^<<", "<^<"],
        "2": ["^<", "<^"],
        "3": ["^"],
        "4": ["^^<<", "^<^<", "^<<^", "<^^<", "<^<^"],
        "5": ["^^<", "^<^", "<^^"],
        "6": ["^^"],
        "7": ["^^^<<", "^^<^<", "^^<<^", "^<^^<", "^<^<^", "^<<^^", "<^^^<", "<^^<^", "<^<^^"],
        "8": ["^^^<", "^^<^", "^<^^", "<^^^"],
        "9": ["^^^"],
    },
    "1": {
        "0": [">v"],
        "A": [">v>", ">>v"],
        "1": [""],
        "2": [">"],
        "3": [">>"],
        "4": ["^"],
        "5": ["^>", ">^"],
        "6": ["^>>", ">^>", ">>^"],
        "7": ["^^"],
        "8": ["^^>", "^>^", ">^^"],
        "9": ["^^>>", "^>^>", "^>>^", ">^^>", ">^>^", ">>^^"],
    },
    "2": {
        "0": ["v"],
        "A": ["v>", ">v"],
        "1": ["<"],
        "2": [""],
        "3": [">"],
        "4": ["^<", "<^"],
        "5": ["^"],
        "6": ["^>", ">^"],
        "7": ["^^<", "^<^", "<^^"],
        "8": ["^^"],
        "9": ["^^>", "^>^", ">^^"],
    },
    "3": {
        "0": ["v<", "<v"],
        "A": ["v"],
        "1": ["<<"],
        "2": ["<"],
        "3": [""],
        "4": ["^<<", "<^<", "<<^"],
        "5": ["^<", "<^"],
        "6": ["^"],
        "7": ["^^<<", "^<^<", "^<<^", "<^^<", "<^<^", "<<^^"],
        "8": ["^^<", "^<^", "<^^"],
        "9": ["^^"],
    },
    "4": {
        "0": ["v>v", ">vv"],
        "A": ["v>v>", "v>>v", ">vv>", ">v>v", ">>vv"],
        "1": ["v"],
        "2": ["v>", ">v"],
        "3": ["v>>", ">v>", ">>v"],
        "4": [""],
        "5": [">"],
        "6": [">>"],
        "7": ["^"],
        "8": ["^>", ">^"],
        "9": ["^>>", ">^>", ">>^"],
    },
    "5": {
        "0": ["vv"],
        "A": ["vv>", "v>v", ">vv"],
        "1": ["v<", "<v"],
        "2": ["v"],
        "3": ["v>", ">v"],
        "4": ["<"],
        "5": [""],
        "6": [">"],
        "7": ["^<", "<^"],
        "8": ["^"],
        "9": ["^>", ">^"],
    },
    "6": {
        "0": ["vv<", "v<v", "<vv"],
        "A": ["vv"],
        "1": ["v<<", "<v<", "<<v"],
        "2": ["v<", "<v"],
        "3": ["v"],
        "4": ["<<"],
        "5": ["<"],
        "6": [""],
        "7": ["^<<", "<^<", "<<^"],
        "8": ["^<", "<^"],
        "9": ["^"],
    },
    "7": {
        "0": ["vv>v", "v>vv", ">vvv"],
        "A": ["vv>v>", "vv>>v", "v>vv>", "v>v>v", "v>>vv", ">vvv>", ">vv>v", ">v>vv", ">>vvv"],
        "1": ["vv"],
        "2": ["vv>", "v>v", ">vv"],
        "3": ["vv>>", "v>v>", "v>>v", ">vv>", ">v>v", ">>vv"],
        "4": ["v"],
        "5": ["v>", ">v"],
        "6": ["v>>", ">v>", ">>v"],
        "7": [""],
        "8": [">"],
        "9": [">>"],
    },
    "8": {
        "0": ["vvv"],
        "A": ["vvv>", "vv>v", "v>vv", ">vvv"],
        "1": ["vv<", "v<v", "<vv"],
        "2": ["vv"],
        "3": ["vv>", "v>v", ">vv"],
        "4": ["v<", "<v"],
        "5": ["v"],
        "6": ["v>", ">v"],
        "7": ["<"],
        "8": [""],
        "9": [">"],
    },
    "9": {
        "0": ["vvv<", "vv<v", "v<vv", "<vvv"],
        "A": ["vvv"],
        "1": ["vv<<", "v<v<", "v<<v", "<vv<", "<v<v", "<<vv"],
        "2": ["vv<", "v<v", "<vv"],
        "3": ["vv"],
        "4": ["v<<", "<v<", "<<v"],
        "5": ["v<", "<v"],
        "6": ["v"],
        "7": ["<<"],
        "8": ["<"],
        "9": [""],
    },
}

#     +---+---+
#     | ^ | A |
# +---+---+---+
# | < | v | > |
# +---+---+---+

directional_keypad = {
    "<": {
        "<": [""],
        "v": [">"],
        ">": [">>"],
        "^": [">^"],
        "A": [">^>", ">>^"],
    },
    "v": {
        "<": ["<"],
        "v": [""],
        ">": [">"],
        "^": ["^"],
        "A": ["^>", ">^"],
    },
    ">": {
        "<": ["<<"],
        "v": ["<"],
        ">": [""],
        "^": ["^<", "<^"],
        "A": ["^"],
    },
    "^": {
        "<": ["v<"],
        "v": ["v"],
        ">": ["v>", ">v"],
        "^": [""],
        "A": [">"],
    },
    "A": {
        "<": ["v<<", "<v<"],
        "v": ["v<", "<v"],
        ">": ["v"],
        "^": ["<"],
        "A": [""],
    },
}


def calculate(codes, keypad):

    all_sequences = []

    # for each code a specific robots needs to type, calculate all possible paths for it
    for code in codes:

        # initialize robot on A
        pos = "A"
        seqs = [""]

        # for a single code, create all solutions
        for char in code:
            seqs = [original + subseq + "A" for original in seqs
                    for subseq in keypad[pos][char]]
            pos = char

        all_sequences += seqs

    # return all solutions together as a list
    all_sequences = sorted(set(all_sequences), key=len)
    return all_sequences


s = 0
for i in range(len(puzzle)):
    code = puzzle[i]

    assert not code[-1].isnumeric()
    j = 0
    while code[j].isnumeric():
        j += 1
    num = int(code[:j])

    #
    robots = []
    robots.append(calculate([code], numeric_keypad))
    # print("Robot 1:", robots[-1])

    robots.append(calculate(robots[-1], directional_keypad))
    # print("Robot 2:", robots[-1])

    robots.append(calculate(robots[-1], directional_keypad))
    # print("Us:", robots[-1])

    l = len(robots[-1][0])
    s += l * num
    print(l, num, "\n")

print(s)
